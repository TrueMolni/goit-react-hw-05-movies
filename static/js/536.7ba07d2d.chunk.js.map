{"version":3,"file":"static/js/536.7ba07d2d.chunk.js","mappings":"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","sources":["Api/Api.js","components/MovieList/MovieList.styled.js","components/MovieSearch/MovieSearch.styled.js","components/MovieSearch/MovieSearch.jsx","pages/MovieSearchPage/MovieSearchPage.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '623333e2eba93b003942355e59320afc';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const API_URL = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`;\n\nconst instance = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    key: API_KEY,\n  },\n});\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const getMovieById = async id => {\n  const { data } = await instance.get(`/movie/${id}?api_key=${API_KEY}`);\n\n  return data;\n};\n\nexport const getTrending = async () => {\n  const { data } = await instance.get(`/trending/all/week?api_key=${API_KEY}`);\n  return data.results;\n};\n\nexport const searchMovies = async query => {\n  const { data } = await instance.get(\n    `\n/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&include_adult=false`\n  );\n  return data.results;\n};\n\nexport const getMovieCredits = async id => {\n  const { data } = await instance.get(\n    `/movie/${id}/credits?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\nexport const getMovieReviews = async id => {\n  const { data } = await instance.get(\n    `/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n","import styled from '@emotion/styled';\n\nexport const MovieUl = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  list-style: none;\n  gap: 30px;\n`;\n\nexport const PosterTitle = styled.p`\n  font-weight: bold;\n  color: #25468e;\n  margin-bottom: 15px;\n  text-align: center;\n`;\n\nexport const FilmPoster = styled.img`\n  display: block;\n  max-width: 100%;\n  height: auto;\n  border-radius: 5px;\n  width: 280px;\n  height: 400px;\n  margin-left: 35px;\n  box-shadow: rgb(0 0 0 / 70%) 5px 5px 13px 0px;\n`;\n\nexport const MovieItem = styled.li`\n  text-decoration: none;\n  list-style: none;\n`;\n","import styled from '@emotion/styled';\n\nexport const SearchBtn = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-image: url('https://image.flaticon.com/icons/svg/149/149852.svg');\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchBtnLabel = styled.span`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n\nexport const SearchForm = styled.form`\n  margin: 0 auto;\n  background-color: #004064;\n  padding: 5px;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const SearchInput = styled.input`\n\n    display: inline-block;\n    margin-left: 5px;\n    width: 100%;\n    font: inherit;\n    font-size: 20px;\n    border: none;\n    outline: none;\n    padding-left: 4px;\n    padding-right: 4px;\n  }\n\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { FcSearch } from 'react-icons/fc';\nimport Notiflix from 'notiflix';\n\nimport {\n  SearchBtn,\n  SearchBtnLabel,\n  SearchForm,\n  SearchInput,\n} from './MovieSearch.styled';\n\nconst MovieSearch = ({ myPropOnSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const options = {\n    position: 'right-top',\n    clickToClose: true,\n  };\n  Notiflix.Notify.init(options);\n\n  const handleChange = ({ target }) => {\n    setQuery(target.value.toLowerCase());\n  };\n\n  const resetQuerry = () => {\n    setQuery('');\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (query.trim().length < 1) {\n      return Notiflix.Notify.failure('Enter more than 1 character');\n    }\n    myPropOnSubmit(query);\n    resetQuerry();\n  };\n\n  return (\n    <SearchForm myPropOnSubmit={handleSubmit}>\n      <SearchBtn type=\"submit\">\n        <FcSearch style={{ width: 22, height: 22 }} />\n        <SearchBtnLabel>Search</SearchBtnLabel>\n      </SearchBtn>\n      <SearchInput\n        onChange={handleChange}\n        type=\"text\"\n        name=\"query\"\n        value={query}\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search images and photos\"\n        required\n      />\n    </SearchForm>\n  );\n};\n\nexport default MovieSearch;\n\nMovieSearch.propType = {\n  myPropOnSubmit: PropTypes.func.isRequired,\n};\n","import { useSearchParams, Link, useLocation } from 'react-router-dom';\nimport { useState, useEffect, useCallback } from 'react';\nimport Notiflix from 'notiflix';\nimport { searchMovies } from '../../Api';\nimport MovieSearch from '../../components/MovieSearch';\nimport {\n  MovieUl,\n  PosterTitle,\n  FilmPoster,\n  MovieItem,\n} from '../../components/MovieList/MovieList.styled';\n\nconst MovieSearchPage = () => {\n  const [movies, setMovies] = useState([]);\n  const location = useLocation();\n  const [, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const IMG = 'https://image.tmdb.org/t/p/w500';\n\n  const query = searchParams.get('query');\n  const page = searchParams.get('page');\n\n  useEffect(() => {\n    if (query === null) {\n      return;\n    }\n    const fetchMovieByKeyWord = async query => {\n      try {\n        const response = await searchMovies(query);\n        setMovies(response);\n        if (response.length === 0) {\n          return Notiflix.Notify.failure('Nothing found');\n        }\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    fetchMovieByKeyWord(query);\n  }, [query, page, setMovies]);\n\n  const handleFormSubmit = useCallback(\n    query => {\n      setSearchParams({ query, page: 1 });\n      setMovies([]);\n    },\n    [setSearchParams]\n  );\n\n  const loadMore = useCallback(() => {\n    setSearchParams({ query, page: Number(page) + 1 });\n  }, [query, page, setSearchParams]);\n\n  return (\n    <>\n      <MovieSearch myPropOnSubmit={handleFormSubmit} />\n\n      <MovieUl>\n        {movies?.map(({ name, original_title, id, poster_path }) => {\n          return (\n            <Link key={id} to={`/movies/${id}`} state={{ from: location }}>\n              <MovieItem>\n                <FilmPoster src={`${IMG}/${poster_path}`} alt={name} />\n                <PosterTitle>{original_title || name}</PosterTitle>\n              </MovieItem>\n            </Link>\n          );\n        })}\n      </MovieUl>\n\n      {movies.length > 0 && <button onClick={loadMore}>Load more</button>}\n    </>\n  );\n};\nexport default MovieSearchPage;\n"],"names":["API_KEY","BASE_URL","instance","axios","baseURL","params","key","getMovieById","id","get","data","getTrending","results","searchMovies","query","getMovieCredits","getMovieReviews","MovieUl","styled","PosterTitle","FilmPoster","MovieItem","SearchBtn","SearchBtnLabel","SearchForm","SearchInput","MovieSearch","myPropOnSubmit","useState","setQuery","Notiflix","position","clickToClose","e","preventDefault","trim","length","type","style","width","height","onChange","target","value","toLowerCase","name","autoComplete","autoFocus","placeholder","required","propType","PropTypes","movies","setMovies","location","useLocation","setError","useSearchParams","searchParams","setSearchParams","page","useEffect","fetchMovieByKeyWord","response","message","handleFormSubmit","useCallback","loadMore","Number","map","original_title","poster_path","to","state","from","src","alt","onClick"],"sourceRoot":""}